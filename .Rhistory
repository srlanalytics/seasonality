#       fc_dates <- seq.Date(from = tail(dates,1), by = 7, length.out = 25)[-1]
#     }else if(all(sapply(dates, FUN = day)%in%c(7,14,21,28:31))){ #pseudo weekly
#       fc_dates <- pseudo_weekly_sequence(start = tail(dates,1), length = 25)
#     }else{
#       fc_dates <- NULL
#     }
#   }else{
#     fc_dates <- NULL
#   }
# }else{
#   fc_dates = NULL
# }
#Step (1): select SARMA model
params <- select_SARMA(y,dates)
params$ar_effect
params$P
ar_effect <- NULL #need to add holidays and such
ma_effect <- NULL
ar_it <- 1
ma_it <- 1
order <- c(1,0)
order_new <- c(1,0)
years <- c("year", "two_year", "three_year")
est <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = ma_effect)
ucv <- var(y, na.rm = T)
pen <- .15
SIC0 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect))/sqrt(length(y)) #Seth's bogus information criteria
for(it in 1:4){
ar_effect_new <- c(ar_effect, years[ar_it])
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect_new, seasonal_ma = ma_effect)
SIC1 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect))/sqrt(length(y))  #Seth's bogus information criteria
ma_effect_new <- c(ma_effect, years[ma_it])
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = ma_effect_new)
SIC2 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect_new))/sqrt(length(y))  #Seth's bogus information criteria
order_ar <- order + c(1,0)
est <- seasonal_arma(y, dates, order = order_ar, seasonal_ar = ar_effect, seasonal_ma = ma_effect)
SIC3 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect))/sqrt(length(y))  #Seth's bogus information criteria
if(length(ma_effect)==0){ #q>0 requires a seasonal MA component
order_ma <- order + c(0,1)
ma_effect_new <- c(ma_effect, years[1])
est <- seasonal_arma(y, dates, order = order_ma, seasonal_ar = ar_effect, seasonal_ma = ma_effect_new)
SIC4 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect))/sqrt(length(y))  #Seth's bogus information criteria
if( all(SIC0 > c(SIC1, SIC2, SIC3, SIC4)) ){
break
}else if( all(SIC1 > c(SIC0, SIC2, SIC3, SIC4)) ){
ar_effect <- ar_effect_new
ar_it <- ar_it + 1
SIC0 <- SIC1
}else if( all(SIC2 > c(SIC1, SIC0, SIC3, SIC4)) ){
ma_effect <- ma_effect_new
ma_it <- ma_it + 1
SIC0 <- SIC2
}else if( all(SIC3 > c(SIC1, SIC2, SIC0, SIC4)) ){
order <- order_ar
SIC0 <- SIC3
}
else if( all(SIC4 > c(SIC0, SIC1, SIC2, SIC3)) ){
order <- order_ma
ma_effect <- ma_effect_new
ma_it <- 2
SIC0 <- SIC4
}
}else{ #if length(ma_effect>0)
order_ma <- order + c(0,1)
est <- seasonal_arma(y, dates, order = order_ma, seasonal_ar = ar_effect, seasonal_ma = ma_effect)
SIC4 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect))/sqrt(length(y))  #Seth's bogus information criteria
if( all(SIC0 > c(SIC1, SIC2, SIC3, SIC4)) ){
break
}else if( all(SIC1 > c(SIC0, SIC2, SIC3, SIC4)) ){
ar_effect <- ar_effect_new
ar_it <- ar_it + 1
SIC0 <- SIC1
}else if( all(SIC2 > c(SIC1, SIC0, SIC3, SIC4)) ){
ma_effect <- ma_effect_new
ma_it <- ma_it + 1
SIC0 <- SIC2
}else if( all(SIC3 > c(SIC1, SIC2, SIC0, SIC4)) ){
order <- order_ar
SIC0 <- SIC3
}
else if( all(SIC4 > c(SIC0, SIC1, SIC2, SIC3)) ){
order <- order_ma
SIC0 <- SIC4
}
}#if length(ma_effect>0)
} #for(it in 1:4)
#test holiday effects --- need to update to set initial values to results from previous iteration
#cny
est <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = ma_effect)
#est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = ma_effect)
# ar_lags <- make_lag_index(dates, effects = "year")
# ma_lags <- make_lag_index(dates, effects = c("year", "cny"))
# est <- SARMA(Y = y, p = est$p, q = est$q, P = est$P, Q = est$Q, P_lag = ar_lags, Q_lag = ma_lags)
initial_vals <- list(p = est$p,
q = est$q,
P = est$P,
Q = est$Q)
new_model <- FALSE
ar_effect_new <- ar_effect
ma_effect_new <- ma_effect
initial_tmp <- initial_vals
initial_tmp$P <- c(initial_tmp$P, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ar_effect, "cny"), seasonal_ma = ma_effect,
initial_vals = initial_tmp)
SIC1 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
initial_tmp <- initial_vals
initial_tmp$Q <- c(initial_tmp$Q, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = c(ma_effect, "cny"),
initial_vals = initial_tmp)
SIC2 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
initial_tmp$P <- c(initial_tmp$P, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ma_effect, "cny"), seasonal_ma = c(ma_effect, "cny"),
initial_vals = initial_tmp)
SIC3 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 2)/sqrt(length(y))
if(SIC1>SIC0 && SIC1>SIC2 && SIC1>SIC3){
ar_effect_new <- c(ar_effect_new, "cny")
SIC0 <- SIC1
new_model <- TRUE
}else if(SIC2>SIC0 && SIC2>SIC1 && SIC2>SIC3){
ma_effect_new <- c(ma_effect_new, "cny")
SIC0 <- SIC2
new_model <- TRUE
}else if(SIC3>SIC0 && SIC3>SIC2 && SIC3>SIC1){
ar_effect_new <- c(ar_effect_new, "cny")
ma_effect_new <- c(ma_effect_new, "cny")
SIC0 <- SIC3
new_model <- TRUE
}
#diwali
initial_tmp <- initial_vals
initial_tmp$P <- c(initial_tmp$P, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ar_effect, "diwali"), seasonal_ma = ma_effect, initial_vals = initial_tmp)
SIC1 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
initial_tmp <- initial_vals
initial_tmp$Q <- c(initial_tmp$Q, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = c(ma_effect, "diwali"), initial_vals = initial_tmp)
SIC2 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
initial_tmp$P <- c(initial_tmp$P, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ma_effect, "diwali"), seasonal_ma = c(ma_effect, "diwali"), initial_vals = initial_tmp)
SIC3 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 2)/sqrt(length(y))
if(SIC1>SIC0 && SIC1>SIC2 && SIC1>SIC3){
ar_effect_new <- c(ar_effect_new, "diwali")
SIC0 <- SIC1
new_model <- TRUE
}else if(SIC2>SIC0 && SIC2>SIC1 && SIC2>SIC3){
ma_effect_new <- c(ma_effect_new, "diwali")
SIC0 <- SIC2
new_model <- TRUE
}else if(SIC3>SIC0 && SIC3>SIC2 && SIC3>SIC1){
ar_effect_new <- c(ar_effect_new, "diwali")
ma_effect_new <- c(ma_effect_new, "diwali")
SIC0 <- SIC3
new_model <- TRUE
}
#easter
#est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = ma_effect)
initial_tmp <- initial_vals
initial_tmp$P <- c(initial_tmp$P, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ar_effect, "easter"), seasonal_ma = ma_effect, initial_vals = initial_tmp)
SIC1 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
initial_tmp <- initial_vals
initial_tmp$Q <- c(initial_tmp$Q, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = c(ma_effect, "easter"), initial_vals = initial_tmp)
SIC2 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
initial_tmp$P <- c(initial_tmp$P, 0)
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ma_effect, "easter"), seasonal_ma = c(ma_effect, "easter"), initial_vals = initial_tmp)
SIC3 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 2)/sqrt(length(y))
if(SIC1>SIC0 && SIC1>SIC2 && SIC1>SIC3){
ar_effect_new <- c(ar_effect_new, "easter")
SIC0 <- SIC1
new_model <- TRUE
}else if(SIC2>SIC0 && SIC2>SIC1 && SIC2>SIC3){
ma_effect_new <- c(ma_effect_new, "easter")
SIC0 <- SIC2
new_model <- TRUE
}else if(SIC3>SIC0 && SIC3>SIC2 && SIC3>SIC1){
ar_effect_new <- c(ar_effect_new, "easter")
ma_effect_new <- c(ma_effect_new, "easter")
SIC0 <- SIC3
new_model <- TRUE
}
#black_friday
if(median(diff(dates))<8){
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ar_effect, "black_friday"), seasonal_ma = ma_effect)
SIC1 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = ar_effect, seasonal_ma = c(ma_effect, "black_friday"))
SIC2 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 1)/sqrt(length(y))
est  <- seasonal_arma(y, dates, order = order, seasonal_ar = c(ma_effect, "black_friday"), seasonal_ma = c(ma_effect, "black_friday"))
SIC3 <- (ucv-est$MSE)/ucv - pen*(sum(order) + length(ar_effect) + length(ma_effect) + 2)/sqrt(length(y))
if(SIC1>SIC0 && SIC1>SIC2 && SIC1>SIC3){
ar_effect_new <- c(ar_effect_new, "black_friday")
SIC0 <- SIC1
new_model <- TRUE
}else if(SIC2>SIC0 && SIC2>SIC1 && SIC2>SIC3){
ma_effect_new <- c(ma_effect_new, "black_friday")
SIC0 <- SIC2
new_model <- TRUE
}else if(SIC3>SIC0 && SIC3>SIC2 && SIC3>SIC1){
ar_effect_new <- c(ar_effect_new, "black_friday")
ma_effect_new <- c(ma_effect_new, "black_friday")
SIC0 <- SIC3
new_model <- TRUE
}
}
new_model
ar_effect
ma_effect
est$Q
library(seasonality)
library(seasonality)
#
# library(data.table)
# load("~/seasonality/data/icnsa.RData")
# load("~/seasonality/data/holiday2.RData")
# library(devtools)
# load_all("~/seasonality")
# initial_claims_SA <- initial_claims_SA[-nrow(initial_claims_SA),]
# save(initial_claims_SA, file = "~/seasonality/data/icsa.RData")
#this can also be entered as a ts_boxable object
dates <- as.Date(initial_claims$DATE)
data  <- initial_claims$ICNSA
start_time <- Sys.time()
SA <- auto_SA(data = data, dates = dates)
end_time <- Sys.time()
end_time - start_time
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, data, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, SA$data_sa, col = "black")
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, initial_claims_SA$ICSA, col = "black")
library(seasonality)
#
# library(data.table)
# load("~/seasonality/data/icnsa.RData")
# load("~/seasonality/data/holiday2.RData")
# library(devtools)
# load_all("~/seasonality")
# initial_claims_SA <- initial_claims_SA[-nrow(initial_claims_SA),]
# save(initial_claims_SA, file = "~/seasonality/data/icsa.RData")
#this can also be entered as a ts_boxable object
dates <- as.Date(initial_claims$DATE)
data  <- initial_claims$ICNSA
start_time <- Sys.time()
SA <- auto_SA(data = data, dates = dates)
end_time <- Sys.time()
end_time - start_time
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, data, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, SA$data_sa, col = "black")
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, initial_claims_SA$ICSA, col = "black")
library(seasonality)
#
# library(data.table)
# load("~/seasonality/data/icnsa.RData")
# load("~/seasonality/data/holiday2.RData")
# library(devtools)
# load_all("~/seasonality")
# initial_claims_SA <- initial_claims_SA[-nrow(initial_claims_SA),]
# save(initial_claims_SA, file = "~/seasonality/data/icsa.RData")
#this can also be entered as a ts_boxable object
dates <- as.Date(initial_claims$DATE)
data  <- initial_claims$ICNSA
start_time <- Sys.time()
SA <- auto_SA(data = data, dates = dates)
end_time <- Sys.time()
end_time - start_time
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, data, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, SA$data_sa, col = "black")
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, initial_claims_SA$ICSA, col = "black")
library(seasonality)
library(seasonality)
library(seasonality)
#
# library(data.table)
# load("~/seasonality/data/icnsa.RData")
# load("~/seasonality/data/holiday2.RData")
# library(devtools)
# load_all("~/seasonality")
# initial_claims_SA <- initial_claims_SA[-nrow(initial_claims_SA),]
# save(initial_claims_SA, file = "~/seasonality/data/icsa.RData")
#this can also be entered as a ts_boxable object
dates <- as.Date(initial_claims$DATE)
data  <- initial_claims$ICNSA
start_time <- Sys.time()
SA <- auto_SA(data = data, dates = dates)
end_time <- Sys.time()
end_time - start_time
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, data, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, SA$data_sa, col = "black")
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, initial_claims_SA$ICSA, col = "black")
library(seasonality)
#
# library(data.table)
# load("~/seasonality/data/icnsa.RData")
# load("~/seasonality/data/holiday2.RData")
# library(devtools)
# load_all("~/seasonality")
# initial_claims_SA <- initial_claims_SA[-nrow(initial_claims_SA),]
# save(initial_claims_SA, file = "~/seasonality/data/icsa.RData")
#this can also be entered as a ts_boxable object
dates <- as.Date(initial_claims$DATE)
data  <- initial_claims$ICNSA
start_time <- Sys.time()
SA <- auto_SA(data = data, dates = dates)
end_time <- Sys.time()
end_time - start_time
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, data, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, SA$data_sa, col = "black")
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, initial_claims_SA$ICSA, col = "black")
library(seasonality)
dates <- as.Date(initial_claims$DATE)
data  <- initial_claims$ICNSA
start_time <- Sys.time()
SA <- auto_SA(data = data, dates = dates)
end_time <- Sys.time()
end_time - start_time
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, data, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, SA$data_sa, col = "black")
#ts.plot(cbind(data_weekly, SA$data_sa), col = c("red", "blue")) #could use some fine tuining but pretty good!
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "Initial Claims")
lines(dates, initial_claims_SA$ICSA, col = "black")
data <- IP$IPNSA
dates <- IP$DATE
SA <- auto_SA(data = data, dates = dates)
y <- ts(y, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates_monthly[-1], diff(SA$data_sa), type = "l", lwd = 3, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates_monthly[-1], diff(final(sa)), lwd = 3, col = "blue")
y <- ts(data, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates_monthly[-1], diff(SA$data_sa), type = "l", lwd = 3, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates_monthly[-1], diff(final(sa)), lwd = 3, col = "blue")
plot(dates[-1], diff(SA$data_sa), type = "l", lwd = 3, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(final(sa)), lwd = 3, col = "blue")
data <- IP$IPNSA
dates <- IP$DATE
data <- log(data)
trend <- loess(data ~ seq(length(data)), span = .15, na.action = na.exclude) #refine parameter selection
trend <- predict(trend) #all we're really interested in
#ts.plot(cbind(data,trend), col = c("red", "blue"))
y <- data - trend
data <- IP$IPNSA
dates <- IP$DATE
data <- log(data)
trend <- loess(data ~ seq(length(data)), span = .15, na.action = na.exclude) #refine parameter selection
trend <- predict(trend) #all we're really interested in
#ts.plot(cbind(data,trend), col = c("red", "blue"))
y <- data - trend
SA <- auto_SA(data = y, dates = dates)
y <- ts(y, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates[-1], diff(SA$data_sa), type = "l", lwd = 3, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(final(sa)), lwd = 3, col = "blue")
plot(dates[-1], diff(SA$data_sa), type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(final(sa)), lwd = 1, col = "blue")
Seas <- seas(y, x11 = "", transform.function = "none", x11.appendfcst = "no")
plot(dates[-1], diff(SA$data_sa), type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(final(Seas)), lwd = 1, col = "blue")
data <- IP$IPNSA
dates <- IP$DATE
data <- log(data)
trend <- loess(data ~ seq(length(data)), span = .15, na.action = na.exclude) #refine parameter selection
trend <- predict(trend) #all we're really interested in
#ts.plot(cbind(data,trend), col = c("red", "blue"))
y <- 10*(data - trend)
SA <- auto_SA(data = y, dates = dates)
y <- ts(y, start = c(1970,1), frequency = 12)
library(seasonal)
Seas <- seas(y, x11 = "", transform.function = "none", x11.appendfcst = "no")
ts.plot(final(Seas))
SA <- auto_SA(data = y, dates = dates)
SA$ar_effect
SA$ma_effect
SA$parameters
plot(dates[-1], diff(SA$data_sa), type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(final(Seas)), lwd = 1, col = "blue")
plot(dates, (SA$data_sa), type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates, (final(Seas)), lwd = 1, col = "blue")
sa <- seas(y)
plot(dates[-1], diff(SA$data_sa), type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(final(sa)), lwd = 1, col = "blue")
data <- IP$IPNSA
dates <- IP$DATE
SA <- auto_SA(data = data, dates = dates)
y <- ts(y, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates, SA$data_sa, type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates, final(sa), lwd = 1, col = "blue")
lines(dates, final(sa), lwd = 2, col = "blue")
plot(dates, SA$data_sa, type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates, final(sa), lwd = 3, col = "lightskyblue1")
final(sa)
dates
data <- IP$IPNSA
dates <- IP$DATE
SA <- auto_SA(data = data, dates = dates)
y <- ts(y, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates, SA$data_sa, type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates, final(sa), lwd = 3, col = "lightskyblue1")
sa <- seas(y)
summary(sa)
data <- IP$IPNSA
dates <- IP$DATE
SA <- auto_SA(data = data, dates = dates)
y <- ts(data, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates, SA$data_sa, type = "l", lwd = 1, col = "red",
xlab = "Dates", ylab = "IP")
lines(dates, SA$data_sa, lwd = 3, col = "lightskyblue1")
data <- IP$IPNSA
dates <- IP$DATE
SA <- auto_SA(data = data, dates = dates)
y <- ts(data, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "IP")
lines(dates, SA$data_sa, lwd = 1, col = "red")
data <- IP$IPNSA
dates <- IP$DATE
SA <- auto_SA(data = data, dates = dates)
y <- ts(data, start = c(1970,1), frequency = 12)
library(seasonal)
sa <- seas(y)
plot(dates, SA$data_sa, type = "l", lwd = 3, col = "blue",
xlab = "Dates", ylab = "IP")
lines(dates, SA$data_sa, lwd = 1, col = "red")
plot(dates[1], diff(log(SA$data_sa)), type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "IP")
lines(dates[1], diff(log(SA$data_sa)), lwd = 1, col = "red")
plot(dates[-1], diff(log(SA$data_sa)), type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(log(SA$data_sa)), lwd = 1, col = "red")
plot(dates[-1], diff(log(SA$data_sa)), type = "l", lwd = 3, col = "blue",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(log(SA$data_sa)), lwd = 1, col = "red")
plot(dates[-1], diff(log(SA$data_sa)), type = "l", lwd = 3, col = "lightskyblue1",
xlab = "Dates", ylab = "IP")
lines(dates[-1], diff(log(final(sa))), lwd = 1, col = "red")
SA$parameters
summary(sa)
print(sa)
library(seasonality)
data <- IP$IPNSA
dates <- IP$DATE
trend <- loess(data ~ seq(length(data)), span = .1, na.action = na.exclude) #refine parameter selection
trend <- predict(trend)
#ts.plot(cbind(trend, data), col = c("red", "blue"))
y <- data - trend
ts,plot(y)
ts.plot(y)
library(seasonality)
data <- IP$IPNSA
dates <- IP$DATE
data <- IP$IPNSA
dates <- IP$DATE
trend <- loess(data ~ seq(length(data)), span = .1, na.action = na.exclude) #refine parameter selection
trend <- predict(trend)
#ts.plot(cbind(trend, data), col = c("red", "blue"))
y <- data - trend
ts.plot(y)
SA <- auto_SA(y, dates, detrend = FALSE)
SA$parameters
SA$MSE
y <- ts(data, start = c(1970,1), frequency = 12)
aa <- auto.arima(y)
summary(aa)
SA$MSE
