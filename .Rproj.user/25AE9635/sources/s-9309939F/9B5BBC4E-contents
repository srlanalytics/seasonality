has_internal_NA <- function(y){
  idx <- seq(from = min(which(is.finite(y))), to = max(which(is.finite(y))))
  return(any(!is.finite(y[idx])))
}

fill_internal_NA <- function(y){
  idx <- seq(from = min(which(is.finite(y))), to = max(which(is.finite(y))))
  if(any(is.na(y[idx]))){
    return(na_appox(y))
  }else{
    return(y)
  }
}

#if > half of observations missing, return NA, else, return mean
mean_if_avail <- function(y){
  if(sum(is.na(y))/length(y) > 0.5){
    return(NA)
  }else{
    return(mean(y, na.rm = T))
  }
}

#' Aggregate a data frame to monthly frequency
#'
#' @param dt data in data table or data frame format including a date column names "date" or "time"
#' @param date_name if the date name is not "date" or "time", specify it here
agg_to_monthly <- function(dt, date_name = NULL){

  stopifnot(is.data.frame(dt)) #data table is a data frame

  dt <- data.table(dt)

  if(is.null(date_name)){
    date_name  <- which(grepl("date", colnames(dt), ignore.case = T) || grepl("time", colnames(dt), ignore.case = T))
  }else{
    date_name  <- which(colnames(dt) == dte)
  }

  if(length(date_name)==0){
    stop("Date column not found in dt")
  }else if(length(date_name)>1){
    stop("More than one column contain date")
  }

  var_names         <- colnames(dt)[-date_name]
  colnames(dt)[date_name] <- "DATE"

  if(median(diff.Date(as.Date(dt$DATE))) >= 28){
    stop("Data is not high frequency (less than monthly)")
  }

  dt_out   <- dt[,  lapply(.SD, mean_if_avail), by = .(year = year(dt$DATE), month = month(dt$DATE)), .SDcols = var_names]
  mnth_dts <- dt[, max(DATE), by = .(year = year(dt$DATE), month = month(dt$DATE))]
  dt_out   <- cbind( mnth_dts[, 3], dt_out[,-c("month", "year"), which = F])
  colnames(dt_out)[1] <- "DATE"

  #If the last date is before the 14th of the month, code as NA
  if(day(as.Date(tail(dt_out$DATE,1))) < 14){
    dt_out[NCOL(dt_out),-1] <- NA
  }

  return(dt_out)

}

#' Aggregate a data frame to monthly frequency
#'
#' @param dt data in data table or data frame format including a date column names "date" or "time"
#' @param date_name if the date name is not "date" or "time", specify it here
agg_to_pseudo_weekly <- function(dt, date_name = NULL){

  dt <- data.table(dt)

  if(is.null(date_name)){
    date_name  <- which(grepl("date", colnames(dt), ignore.case = T) || grepl("time", colnames(dt), ignore.case = T))
  }else{
    date_name  <- which(colnames(dt) == dte)
  }

  if(length(date_name)==0){
    stop("Date column not found in dt")
  }else if(length(date_name)>1){
    stop("More than one column contain date")
  }

  all_names         <- colnames(dt)
  var_names         <- colnames(dt)[-date_name]
  colnames(dt)[date_name] <- "DATE"
  dt$DATE <- as.Date(dt$DATE)

  freq   <- apply(dt[,-date_name,with = F],MARGIN = 2,FUN = get_freq_dt, dates = dt$DATE)
  #High Frequency (daily)
  HF_ind <- which(all_names%in%var_names[which(freq<5)])
  HF_names <- all_names[HF_ind]
  dt_HF <- dt[, c(date_name, HF_ind), with = F]

  #Weekly frequency
  WF_ind <- which(all_names%in%var_names[which(freq >= 5 & freq <= 7)])
  WF_names <- all_names[WF_ind]
  dt_WF <- dt[, c(date_name, WF_ind), with = F]

  #Low frequency (monthly or more)
  LF_ind   <- which(all_names%in%var_names[which(freq>=31)])
  LF_names <- all_names[LF_ind]
  dt_LF    <- dt[, c(date_name, LF_ind), with = F]

  if(length(c(WF_ind, HF_ind))==0){
    stop("Nothing to aggregate")
  }

  #Week 4 is day 22 through the end of the month
  week_ind <- ceiling(sapply(dt_HF$DATE, FUN = day)/7)
  week_ind[week_ind == 5] <- 4
  dt_HF <- dt_HF[, weeks := week_ind]
  dt_WF <- dt_WF[, weeks := week_ind]
  dt_LF <- dt_LF[, weeks := week_ind]

  dt_out <- dt_HF[, .(DATE = max(DATE)), by = .(weeks, month(dt_HF$DATE), year(dt_HF$DATE))]

  #get weekly data and dates
  if(length(WF_ind)>0){
    dt_WF <- dt_WF[,  lapply(.SD, mean_if_avail), by = .(weeks, month(dt_WF$DATE), year(dt_WF$DATE)), .SDcols = WF_names]
    dt_out <- merge(dt_out, dt_WF,by = c("year", "month", "weeks"), all = T)
  }

  #aggregate daily data
  if(length(HF_ind)>0){
    dt_HF <- dt_HF[,  lapply(.SD, mean_weekly), by = .(weeks, month(dt_HF$DATE), year(dt_HF$DATE)), .SDcols = HF_names]
    dt_out <- merge(dt_out, dt_HF,by = c("year", "month", "weeks"), all = T)
  }

  dt_out <- dt_out[,!colnames(dt_out)%in%c("year", "month"), with = F]
  colnames(dt_out)[1] <- "DATE"

  return(dt_out)
}