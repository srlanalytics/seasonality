// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// stack_obs
arma:: mat stack_obs(arma::mat nn, arma::uword p, arma::uword r);
RcppExport SEXP _seasonality_stack_obs(SEXP nnSEXP, SEXP pSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_obs(nn, p, r));
    return rcpp_result_gen;
END_RCPP
}
// last_year_holiday
Rcpp::Date last_year_holiday(Rcpp::Date today, Rcpp::Date this_holiday, Rcpp::Date last_holiday);
RcppExport SEXP _seasonality_last_year_holiday(SEXP todaySEXP, SEXP this_holidaySEXP, SEXP last_holidaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type today(todaySEXP);
    Rcpp::traits::input_parameter< Rcpp::Date >::type this_holiday(this_holidaySEXP);
    Rcpp::traits::input_parameter< Rcpp::Date >::type last_holiday(last_holidaySEXP);
    rcpp_result_gen = Rcpp::wrap(last_year_holiday(today, this_holiday, last_holiday));
    return rcpp_result_gen;
END_RCPP
}
// last_year
Rcpp::Date last_year(Rcpp::Date today);
RcppExport SEXP _seasonality_last_year(SEXP todaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type today(todaySEXP);
    rcpp_result_gen = Rcpp::wrap(last_year(today));
    return rcpp_result_gen;
END_RCPP
}
// years_ago
Rcpp::Date years_ago(Rcpp::Date today, int shift);
RcppExport SEXP _seasonality_years_ago(SEXP todaySEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type today(todaySEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(years_ago(today, shift));
    return rcpp_result_gen;
END_RCPP
}
// next_year_holiday
Rcpp::Date next_year_holiday(Rcpp::Date today, Rcpp::Date this_holiday, Rcpp::Date next_holiday);
RcppExport SEXP _seasonality_next_year_holiday(SEXP todaySEXP, SEXP this_holidaySEXP, SEXP next_holidaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type today(todaySEXP);
    Rcpp::traits::input_parameter< Rcpp::Date >::type this_holiday(this_holidaySEXP);
    Rcpp::traits::input_parameter< Rcpp::Date >::type next_holiday(next_holidaySEXP);
    rcpp_result_gen = Rcpp::wrap(next_year_holiday(today, this_holiday, next_holiday));
    return rcpp_result_gen;
END_RCPP
}
// next_year
Rcpp::Date next_year(Rcpp::Date today);
RcppExport SEXP _seasonality_next_year(SEXP todaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type today(todaySEXP);
    rcpp_result_gen = Rcpp::wrap(next_year(today));
    return rcpp_result_gen;
END_RCPP
}
// which_date_leq
arma::uword which_date_leq(Rcpp::Date date, std::vector<Date> Dvec);
RcppExport SEXP _seasonality_which_date_leq(SEXP dateSEXP, SEXP DvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type date(dateSEXP);
    Rcpp::traits::input_parameter< std::vector<Date> >::type Dvec(DvecSEXP);
    rcpp_result_gen = Rcpp::wrap(which_date_leq(date, Dvec));
    return rcpp_result_gen;
END_RCPP
}
// which_date_geq
arma::uword which_date_geq(Rcpp::Date date, std::vector<Date> Dvec);
RcppExport SEXP _seasonality_which_date_geq(SEXP dateSEXP, SEXP DvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type date(dateSEXP);
    Rcpp::traits::input_parameter< std::vector<Date> >::type Dvec(DvecSEXP);
    rcpp_result_gen = Rcpp::wrap(which_date_geq(date, Dvec));
    return rcpp_result_gen;
END_RCPP
}
// which_date_closest
arma::uword which_date_closest(Rcpp::Date date, std::vector<Date> Dvec);
RcppExport SEXP _seasonality_which_date_closest(SEXP dateSEXP, SEXP DvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type date(dateSEXP);
    Rcpp::traits::input_parameter< std::vector<Date> >::type Dvec(DvecSEXP);
    rcpp_result_gen = Rcpp::wrap(which_date_closest(date, Dvec));
    return rcpp_result_gen;
END_RCPP
}
// which_date_closest_ordered
arma::uvec which_date_closest_ordered(std::vector<Date> FromVec, std::vector<Date> IndVec);
RcppExport SEXP _seasonality_which_date_closest_ordered(SEXP FromVecSEXP, SEXP IndVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type FromVec(FromVecSEXP);
    Rcpp::traits::input_parameter< std::vector<Date> >::type IndVec(IndVecSEXP);
    rcpp_result_gen = Rcpp::wrap(which_date_closest_ordered(FromVec, IndVec));
    return rcpp_result_gen;
END_RCPP
}
// day
arma::uword day(Rcpp::Date date);
RcppExport SEXP _seasonality_day(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(day(date));
    return rcpp_result_gen;
END_RCPP
}
// replace_day
Rcpp::Date replace_day(Rcpp::Date date, int new_day);
RcppExport SEXP _seasonality_replace_day(SEXP dateSEXP, SEXP new_daySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type date(dateSEXP);
    Rcpp::traits::input_parameter< int >::type new_day(new_daySEXP);
    rcpp_result_gen = Rcpp::wrap(replace_day(date, new_day));
    return rcpp_result_gen;
END_RCPP
}
// MonthDays
int MonthDays(double year, double month);
RcppExport SEXP _seasonality_MonthDays(SEXP yearSEXP, SEXP monthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type year(yearSEXP);
    Rcpp::traits::input_parameter< double >::type month(monthSEXP);
    rcpp_result_gen = Rcpp::wrap(MonthDays(year, month));
    return rcpp_result_gen;
END_RCPP
}
// end_of_month
std::vector<Date> end_of_month(std::vector<Date> date);
RcppExport SEXP _seasonality_end_of_month(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(end_of_month(date));
    return rcpp_result_gen;
END_RCPP
}
// end_next_month
std::vector<Date> end_next_month(std::vector<Date> date);
RcppExport SEXP _seasonality_end_next_month(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(end_next_month(date));
    return rcpp_result_gen;
END_RCPP
}
// end_previous_month
std::vector<Date> end_previous_month(std::vector<Date> date);
RcppExport SEXP _seasonality_end_previous_month(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(end_previous_month(date));
    return rcpp_result_gen;
END_RCPP
}
// end_of_month_date
Rcpp::Date end_of_month_date(Rcpp::Date date);
RcppExport SEXP _seasonality_end_of_month_date(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(end_of_month_date(date));
    return rcpp_result_gen;
END_RCPP
}
// first_of_month
std::vector<Date> first_of_month(std::vector<Date> date);
RcppExport SEXP _seasonality_first_of_month(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(first_of_month(date));
    return rcpp_result_gen;
END_RCPP
}
// end_of_quarter
std::vector<Date> end_of_quarter(std::vector<Date> date);
RcppExport SEXP _seasonality_end_of_quarter(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(end_of_quarter(date));
    return rcpp_result_gen;
END_RCPP
}
// first_previous_quarter
std::vector<Date> first_previous_quarter(std::vector<Date> date);
RcppExport SEXP _seasonality_first_previous_quarter(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(first_previous_quarter(date));
    return rcpp_result_gen;
END_RCPP
}
// month_diff
arma::uvec month_diff(std::vector<Date> first_date, std::vector<Date> second_date);
RcppExport SEXP _seasonality_month_diff(SEXP first_dateSEXP, SEXP second_dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Date> >::type first_date(first_dateSEXP);
    Rcpp::traits::input_parameter< std::vector<Date> >::type second_date(second_dateSEXP);
    rcpp_result_gen = Rcpp::wrap(month_diff(first_date, second_date));
    return rcpp_result_gen;
END_RCPP
}
// ps_week
arma::uword ps_week(Rcpp::Date day);
RcppExport SEXP _seasonality_ps_week(SEXP daySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type day(daySEXP);
    rcpp_result_gen = Rcpp::wrap(ps_week(day));
    return rcpp_result_gen;
END_RCPP
}
// pseudo_weekly_sequence
std::vector<Date> pseudo_weekly_sequence(Rcpp::Date start, arma::uword length, Rcpp::Date end);
RcppExport SEXP _seasonality_pseudo_weekly_sequence(SEXP startSEXP, SEXP lengthSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type start(startSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::Date >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudo_weekly_sequence(start, length, end));
    return rcpp_result_gen;
END_RCPP
}
// pseudo_weekly_date
Rcpp::Date pseudo_weekly_date(Rcpp::Date date);
RcppExport SEXP _seasonality_pseudo_weekly_date(SEXP dateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Date >::type date(dateSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudo_weekly_date(date));
    return rcpp_result_gen;
END_RCPP
}
// numeric_to_date
Rcpp::Date numeric_to_date(int year, int month, int day);
RcppExport SEXP _seasonality_numeric_to_date(SEXP yearSEXP, SEXP monthSEXP, SEXP daySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type year(yearSEXP);
    Rcpp::traits::input_parameter< int >::type month(monthSEXP);
    Rcpp::traits::input_parameter< int >::type day(daySEXP);
    rcpp_result_gen = Rcpp::wrap(numeric_to_date(year, month, day));
    return rcpp_result_gen;
END_RCPP
}
// SARMA
List SARMA(arma::vec Y, arma::rowvec p, arma::rowvec q, arma::rowvec P, arma::rowvec Q, arma::umat P_lag, arma::umat Q_lag);
RcppExport SEXP _seasonality_SARMA(SEXP YSEXP, SEXP pSEXP, SEXP qSEXP, SEXP PSEXP, SEXP QSEXP, SEXP P_lagSEXP, SEXP Q_lagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type P(PSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type P_lag(P_lagSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type Q_lag(Q_lagSEXP);
    rcpp_result_gen = Rcpp::wrap(SARMA(Y, p, q, P, Q, P_lag, Q_lag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_seasonality_stack_obs", (DL_FUNC) &_seasonality_stack_obs, 3},
    {"_seasonality_last_year_holiday", (DL_FUNC) &_seasonality_last_year_holiday, 3},
    {"_seasonality_last_year", (DL_FUNC) &_seasonality_last_year, 1},
    {"_seasonality_years_ago", (DL_FUNC) &_seasonality_years_ago, 2},
    {"_seasonality_next_year_holiday", (DL_FUNC) &_seasonality_next_year_holiday, 3},
    {"_seasonality_next_year", (DL_FUNC) &_seasonality_next_year, 1},
    {"_seasonality_which_date_leq", (DL_FUNC) &_seasonality_which_date_leq, 2},
    {"_seasonality_which_date_geq", (DL_FUNC) &_seasonality_which_date_geq, 2},
    {"_seasonality_which_date_closest", (DL_FUNC) &_seasonality_which_date_closest, 2},
    {"_seasonality_which_date_closest_ordered", (DL_FUNC) &_seasonality_which_date_closest_ordered, 2},
    {"_seasonality_day", (DL_FUNC) &_seasonality_day, 1},
    {"_seasonality_replace_day", (DL_FUNC) &_seasonality_replace_day, 2},
    {"_seasonality_MonthDays", (DL_FUNC) &_seasonality_MonthDays, 2},
    {"_seasonality_end_of_month", (DL_FUNC) &_seasonality_end_of_month, 1},
    {"_seasonality_end_next_month", (DL_FUNC) &_seasonality_end_next_month, 1},
    {"_seasonality_end_previous_month", (DL_FUNC) &_seasonality_end_previous_month, 1},
    {"_seasonality_end_of_month_date", (DL_FUNC) &_seasonality_end_of_month_date, 1},
    {"_seasonality_first_of_month", (DL_FUNC) &_seasonality_first_of_month, 1},
    {"_seasonality_end_of_quarter", (DL_FUNC) &_seasonality_end_of_quarter, 1},
    {"_seasonality_first_previous_quarter", (DL_FUNC) &_seasonality_first_previous_quarter, 1},
    {"_seasonality_month_diff", (DL_FUNC) &_seasonality_month_diff, 2},
    {"_seasonality_ps_week", (DL_FUNC) &_seasonality_ps_week, 1},
    {"_seasonality_pseudo_weekly_sequence", (DL_FUNC) &_seasonality_pseudo_weekly_sequence, 3},
    {"_seasonality_pseudo_weekly_date", (DL_FUNC) &_seasonality_pseudo_weekly_date, 1},
    {"_seasonality_numeric_to_date", (DL_FUNC) &_seasonality_numeric_to_date, 3},
    {"_seasonality_SARMA", (DL_FUNC) &_seasonality_SARMA, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_seasonality(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
